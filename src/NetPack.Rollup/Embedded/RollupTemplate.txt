"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rolluphost_1 = require("netpack-rollup");
const RollupFileOptions_1 = require("netpack-rollup/dist/RollupFileOptions");
const RollupOutputOptions_1 = require("netpack-rollup/dist/RollupOutputOptions");
const hypothetical = require("rollup-plugin-hypothetical");
const fs = require("fs");
{{ for plugin in plugins }}
const {{ plugin.default_export_name ?? "plugin" + for.index }} = require("{{ plugin.package_name }}");{{ end }}

var allFiles = {};

module.exports = {

    build: function (callback, requestDto) {

        var files = requestDto.files;
        for (var i = 0; i < requestDto.files.length; i++) {

            var file = requestDto.files[i];
            allFiles[file.path] = file.contents;
        }

        var inputOptionsDto = requestDto.inputOptions;
        var outputOptionsDto = requestDto.outputOptions;

        var inputOptions = new RollupFileOptions_1.default();
        inputOptions.input = inputOptionsDto.input;
        // inputOptions.entry = inputOptionsDto.input;

        var hypotheticalPlugin = hypothetical({
            files: allFiles
        });
        hypotheticalPlugin.cwd = false;
		var plugins = [hypotheticalPlugin];		
		{{ for plugin in plugins }}{{ if plugin.import_only }}{{ else }}{{ if plugin.plugin_configuration_json }}		
		var pluginConfig{{ for.index }} = {{ plugin.plugin_configuration_json }}
		var newPlugin{{ for.index }} = {{ plugin.default_export_name ?? "plugin" + for.index }}(pluginConfig{{ for.index }});{{ else }}var newPlugin{{ for.index }} = {{ plugin.default_export_name ?? "plugin" + for.index }}();{{ end }}		
		plugins.push(newPlugin{{ for.index }});
		{{ end }}{{ end }}

        inputOptions.plugins = plugins;
		if(inputOptionsDto.external != null)
		{
		   inputOptions.external = inputOptionsDto.external;
		}

        var outputOptions = new RollupOutputOptions_1.default();
        outputOptions.format = outputOptionsDto.format;
		if(outputOptionsDto.name != null)
		{
		   outputOptions.name = outputOptionsDto.name;
		}
		if(outputOptionsDto.globals != null)
		{
		   outputOptions.globals = outputOptionsDto.globals;
		}
		if(outputOptionsDto.paths != null)
		{
		   outputOptions.paths = outputOptionsDto.paths;
		}	
		if(outputOptionsDto.sourcemap != null)
		{
			if(outputOptionsDto.sourcemap == "inline")
			{
			   outputOptions.sourcemap = "inline";
			}
			else
			{
			   outputOptions.sourcemap = true;
			}
		}

        let sut = new rolluphost_1.default();
		
        sut.build(inputOptions, outputOptions).then(result => {
            if (result === undefined) {
               callback("result was undefined", null);
            }
            else {             
				var response = { Result: result }
				callback(null, response); 
            }          
        }).catch((reason) => {
            callback(reason, null);
        });
    }
};